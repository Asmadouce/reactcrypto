{"version":3,"sources":["components/List.js","components/Notif.js","App.js","serviceWorker.js","index.js"],"names":["List","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","items","coin","handleClick","bind","assertThisInitialized","e","setState","target","value","_this2","axios","get","then","res","data","_this3","filteredCoin","filter","id","react_default","a","createElement","onClick","map","key","name","coins","className","style","width","symbol","priceUsd","Math","sign","changePercent24Hr","parseFloat","React","Component","Notif","addNotification","notificationDOMRef","createRef","current","title","message","type","insert","container","animationIn","animationOut","dismiss","duration","dismissable","click","react_notifications_component_default","ref","App","List_List","components_Notif","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3392d839.chunk.js","sourcesContent":["import React from \"react\"\nimport axios from \"axios\";\nimport './values.css';\n\nexport default class List extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            items : [],\n            coin :  \"bitcoin\"\n        };\n        // This binding is necessary to make `this` work in the callback\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick(e) {\n        this.setState({coin: e.target.value});\n    }\n\n    componentDidMount() {\n        axios.get(`https://api.coincap.io/v2/assets/`)\n            .then(res=> {\n                const items = res.data.data;\n                this.setState({items})\n            })\n    }\n\n    render () {\n        const filteredCoin = this.state.items.filter(coin => coin.id === this.state.coin);\n\n        return (\n            <div>\n\n                <select onClick={this.handleClick}>\n                    {this.state.items.map(coin=>(\n                        <option\n                            key={coin.id}\n                            value={coin.id}\n                        >\n                            {coin.name}\n                        </option>\n                    ))};\n                </select>\n\n\n                {filteredCoin.map((coins)=>(\n                    <div className=\"container\">\n                        <center><h1 className=\"text-light\">{coins.name}</h1></center>\n                        <div className=\"row\">\n                            {/*{values.map((value) => (*/}\n                            <div className=\"card text-center m-3 col-sm-12  bg-secondary\" style={{ width: '18rem' }}>\n                                <div className=\"card-body\">\n                                    <h5 className=\"card-title\">{coins.symbol}</h5>\n                                    <div className=\"card-title\">{coins.priceUsd} $</div>\n                                    <p className={Math.sign(coins.changePercent24Hr) === -1 ? 'text-danger' : 'text-success'}>\n                                        Tendance : {parseFloat(coins.changePercent24Hr)}%\n                                    </p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                ))}\n\n\n            </div>\n\n        )\n    }\n\n}","import React from \"react\";\nimport ReactNotification from \"react-notifications-component\";\n\nclass Notif extends React.Component {\n    constructor(props) {\n        super(props);\n        this.addNotification = this.addNotification.bind(this);\n        this.notificationDOMRef = React.createRef();\n    }\n\n    addNotification() {\n        this.notificationDOMRef.current.addNotification({\n            title: \"Awesomeness\",\n            message: \"Awesome Notifications!\",\n            type: \"danger\",\n            insert: \"top\",\n            container: \"top-center\",\n            animationIn: [\"animated\", \"fadeIn\"],\n            animationOut: [\"animated\", \"fadeOut\"],\n            dismiss: { duration: 2000 },\n            dismissable: { click: true }\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"app-content\">\n                <ReactNotification ref={this.notificationDOMRef} />\n                <button onClick={this.addNotification} className=\"btn btn-primary\">\n                    Add Awesome Notification\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default Notif;","import React, {Component} from 'react';\nimport List from './components/List';\nimport Notif from './components/Notif'\n\n\n\nclass App extends Component {\n\n\n    render () {\n        return (\n            <List/> ,\n            <Notif/>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}